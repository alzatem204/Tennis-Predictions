{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOKw3/5MoDT8UqWAkMDCdaN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ljum9Oi4nQqH","executionInfo":{"status":"ok","timestamp":1751757288447,"user_tz":300,"elapsed":3412,"user":{"displayName":"Juan José Alzate Molina","userId":"13371847134369819030"}},"outputId":"9dfca48e-9c7d-49e9-ad50-7e69804a43a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["2015 cargado\n","2016 cargado\n","2017 cargado\n","2018 cargado\n","2019 cargado\n","2020 cargado\n","2021 cargado\n","2022 cargado\n","2023 cargado\n","2024 cargado\n","2025 cargado\n"]}],"source":["import pandas as pd\n","\n","years = list(range(2015, 2026))\n","base_url = \"https://raw.githubusercontent.com/Tennismylife/TML-Database/master/{}.csv\"\n","\n","dfs = []\n","for year in years:\n","    url = base_url.format(year)\n","    try:\n","        df = pd.read_csv(url)\n","        df[\"year\"] = year\n","        dfs.append(df)\n","        print(f\"{year} cargado\")\n","    except Exception as e:\n","        print(f\"Error en {year}: {e}\")\n","\n","all_matches = pd.concat(dfs, ignore_index=True)"]},{"cell_type":"code","source":["# Filtrar partidos con estadísticas básicas y rankings\n","filtered = all_matches[\n","    (all_matches[\"winner_rank\"].notnull()) &\n","    (all_matches[\"loser_rank\"].notnull()) &\n","    (all_matches[\"winner_rank\"] > 0) &\n","    (all_matches[\"loser_rank\"] > 0)\n","]\n","\n","# Convertir fechas\n","filtered[\"tourney_date\"] = pd.to_datetime(filtered[\"tourney_date\"], format=\"%Y%m%d\")\n","\n","# Seleccionar columnas clave para historial\n","cols = [\"tourney_date\", \"surface\", \"winner_name\", \"loser_name\", \"winner_rank\", \"loser_rank\"]\n","matches = filtered[cols].copy()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DdcYHpGkW09M","executionInfo":{"status":"ok","timestamp":1751757294312,"user_tz":300,"elapsed":51,"user":{"displayName":"Juan José Alzate Molina","userId":"13371847134369819030"}},"outputId":"f6e7e412-34b2-4b12-d03c-457b7d0eb1c2"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-2-2095498531.py:10: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  filtered[\"tourney_date\"] = pd.to_datetime(filtered[\"tourney_date\"], format=\"%Y%m%d\")\n"]}]},{"cell_type":"code","source":["def compute_symmetric_dataset_mixed(df, n_matches=50):\n","    rows = []\n","\n","    for idx, row in df.iterrows():\n","        date = row[\"tourney_date\"]\n","        surface = row[\"surface\"]\n","        p1, p2 = row[\"winner_name\"], row[\"loser_name\"]\n","        r1, r2 = row[\"winner_rank\"], row[\"loser_rank\"]\n","\n","        history_p1 = df[((df[\"winner_name\"] == p1) | (df[\"loser_name\"] == p1)) & (df[\"tourney_date\"] < date)]\n","        history_p2 = df[((df[\"winner_name\"] == p2) | (df[\"loser_name\"] == p2)) & (df[\"tourney_date\"] < date)]\n","\n","        if len(history_p1) < 3 or len(history_p2) < 3:\n","            continue\n","\n","        def win_rate(player, hist):\n","            wins = (hist[\"winner_name\"] == player).sum()\n","            return wins / len(hist)\n","\n","        # Caso 1: p1 = winner\n","        rows.append({\n","            \"p1_rank\": r1,\n","            \"p2_rank\": r2,\n","            \"p1_winrate\": win_rate(p1, history_p1),\n","            \"p2_winrate\": win_rate(p2, history_p2),\n","            \"surface\": surface,\n","            \"target\": 1\n","        })\n","\n","        # Caso 2: p1 = loser\n","        rows.append({\n","            \"p1_rank\": r2,\n","            \"p2_rank\": r1,\n","            \"p1_winrate\": win_rate(p2, history_p2),\n","            \"p2_winrate\": win_rate(p1, history_p1),\n","            \"surface\": surface,\n","            \"target\": 0\n","        })\n","\n","    return pd.DataFrame(rows)\n","\n","mixed_training_df = compute_symmetric_dataset_mixed(matches)"],"metadata":{"id":"-I1QAOxadCQC","executionInfo":{"status":"ok","timestamp":1751757651136,"user_tz":300,"elapsed":343047,"user":{"displayName":"Juan José Alzate Molina","userId":"13371847134369819030"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Ver las dimensiones del dataset\n","print(f\"Número total de partidos: {mixed_training_df.shape[0]}\")\n","print(f\"Número de columnas: {mixed_training_df.shape[1]}\")\n","\n","# Mostrar las primeras filas\n","display(mixed_training_df.head())\n","\n","# Ver nombres de las columnas\n","print(\"Columnas disponibles:\")\n","print(mixed_training_df.columns.tolist())\n","\n","# Ver resumen general\n","display(mixed_training_df.describe(include='all'))\n","\n","# Verificar valores nulos por columna\n","print(\"\\nValores nulos por columna:\")\n","print(mixed_training_df.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":816},"id":"JSRlaIO3dbEn","executionInfo":{"status":"ok","timestamp":1751757848584,"user_tz":300,"elapsed":90,"user":{"displayName":"Juan José Alzate Molina","userId":"13371847134369819030"}},"outputId":"334fb3e4-fef9-46b7-9825-56950f0dd2f0"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Número total de partidos: 52144\n","Número de columnas: 6\n"]},{"output_type":"display_data","data":{"text/plain":["   p1_rank  p2_rank  p1_winrate  p2_winrate surface  target\n","0     45.0     81.0    0.666667    0.666667    Hard       1\n","1     81.0     45.0    0.666667    0.666667    Hard       0\n","2     45.0     71.0    0.666667    0.666667    Hard       1\n","3     71.0     45.0    0.666667    0.666667    Hard       0\n","4      1.0    116.0    0.666667    0.800000    Hard       1"],"text/html":["\n","  <div id=\"df-850f4864-5077-45f0-bfb0-7cb0b22ac215\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>p1_rank</th>\n","      <th>p2_rank</th>\n","      <th>p1_winrate</th>\n","      <th>p2_winrate</th>\n","      <th>surface</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>45.0</td>\n","      <td>81.0</td>\n","      <td>0.666667</td>\n","      <td>0.666667</td>\n","      <td>Hard</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>81.0</td>\n","      <td>45.0</td>\n","      <td>0.666667</td>\n","      <td>0.666667</td>\n","      <td>Hard</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>45.0</td>\n","      <td>71.0</td>\n","      <td>0.666667</td>\n","      <td>0.666667</td>\n","      <td>Hard</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>71.0</td>\n","      <td>45.0</td>\n","      <td>0.666667</td>\n","      <td>0.666667</td>\n","      <td>Hard</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>116.0</td>\n","      <td>0.666667</td>\n","      <td>0.800000</td>\n","      <td>Hard</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-850f4864-5077-45f0-bfb0-7cb0b22ac215')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-850f4864-5077-45f0-bfb0-7cb0b22ac215 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-850f4864-5077-45f0-bfb0-7cb0b22ac215');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-e1068ae6-0933-462a-a93d-0ebf83f5922c\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1068ae6-0933-462a-a93d-0ebf83f5922c')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-e1068ae6-0933-462a-a93d-0ebf83f5922c button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"print(mixed_training_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"p1_rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.996774025694997,\n        \"min\": 1.0,\n        \"max\": 81.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          81.0,\n          1.0,\n          45.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p2_rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.475413483104866,\n        \"min\": 45.0,\n        \"max\": 116.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          45.0,\n          116.0,\n          81.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p1_winrate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.6666666666666666,\n        \"max\": 0.6666666666666666,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6666666666666666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p2_winrate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05962847939999443,\n        \"min\": 0.6666666666666666,\n        \"max\": 0.8,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"surface\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Hard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Columnas disponibles:\n","['p1_rank', 'p2_rank', 'p1_winrate', 'p2_winrate', 'surface', 'target']\n"]},{"output_type":"display_data","data":{"text/plain":["             p1_rank       p2_rank    p1_winrate    p2_winrate surface  \\\n","count   52144.000000  52144.000000  52144.000000  52144.000000   52110   \n","unique           NaN           NaN           NaN           NaN       4   \n","top              NaN           NaN           NaN           NaN    Hard   \n","freq             NaN           NaN           NaN           NaN   30374   \n","mean       69.166174     69.166174      0.506198      0.506198     NaN   \n","std        84.131770     84.131770      0.138804      0.138804     NaN   \n","min         1.000000      1.000000      0.000000      0.000000     NaN   \n","25%        23.000000     23.000000      0.428571      0.428571     NaN   \n","50%        51.000000     51.000000      0.500000      0.500000     NaN   \n","75%        87.000000     87.000000      0.589041      0.589041     NaN   \n","max      1821.000000   1821.000000      1.000000      1.000000     NaN   \n","\n","              target  \n","count   52144.000000  \n","unique           NaN  \n","top              NaN  \n","freq             NaN  \n","mean        0.500000  \n","std         0.500005  \n","min         0.000000  \n","25%         0.000000  \n","50%         0.500000  \n","75%         1.000000  \n","max         1.000000  "],"text/html":["\n","  <div id=\"df-e45ef853-394d-4012-a6e0-f2a55b1e00d9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>p1_rank</th>\n","      <th>p2_rank</th>\n","      <th>p1_winrate</th>\n","      <th>p2_winrate</th>\n","      <th>surface</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>52144.000000</td>\n","      <td>52144.000000</td>\n","      <td>52144.000000</td>\n","      <td>52144.000000</td>\n","      <td>52110</td>\n","      <td>52144.000000</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Hard</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>30374</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>69.166174</td>\n","      <td>69.166174</td>\n","      <td>0.506198</td>\n","      <td>0.506198</td>\n","      <td>NaN</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>84.131770</td>\n","      <td>84.131770</td>\n","      <td>0.138804</td>\n","      <td>0.138804</td>\n","      <td>NaN</td>\n","      <td>0.500005</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>23.000000</td>\n","      <td>23.000000</td>\n","      <td>0.428571</td>\n","      <td>0.428571</td>\n","      <td>NaN</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>51.000000</td>\n","      <td>51.000000</td>\n","      <td>0.500000</td>\n","      <td>0.500000</td>\n","      <td>NaN</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>87.000000</td>\n","      <td>87.000000</td>\n","      <td>0.589041</td>\n","      <td>0.589041</td>\n","      <td>NaN</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1821.000000</td>\n","      <td>1821.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>NaN</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e45ef853-394d-4012-a6e0-f2a55b1e00d9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e45ef853-394d-4012-a6e0-f2a55b1e00d9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e45ef853-394d-4012-a6e0-f2a55b1e00d9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-ee2e5998-2528-491b-ad93-1d65407dc415\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ee2e5998-2528-491b-ad93-1d65407dc415')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-ee2e5998-2528-491b-ad93-1d65407dc415 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"print(mixed_training_df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"p1_rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18338.25624985819,\n        \"min\": 1.0,\n        \"max\": 52144.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          69.16617444001227,\n          51.0,\n          52144.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p2_rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18338.25624985819,\n        \"min\": 1.0,\n        \"max\": 52144.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          69.16617444001227,\n          51.0,\n          52144.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p1_winrate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18435.528265341836,\n        \"min\": 0.0,\n        \"max\": 52144.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5061981422489629,\n          0.5,\n          52144.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p2_winrate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18435.528265341836,\n        \"min\": 0.0,\n        \"max\": 52144.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5061981422489629,\n          0.5,\n          52144.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"surface\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          \"30374\",\n          \"52110\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18435.51122603272,\n        \"min\": 0.0,\n        \"max\": 52144.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5,\n          1.0,\n          0.5000047944844253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Valores nulos por columna:\n","p1_rank        0\n","p2_rank        0\n","p1_winrate     0\n","p2_winrate     0\n","surface       34\n","target         0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","\n","# Codificar superficie\n","le = LabelEncoder()\n","mixed_training_df[\"surface\"] = le.fit_transform(mixed_training_df[\"surface\"])"],"metadata":{"id":"07UYWYHzkfcF","executionInfo":{"status":"ok","timestamp":1751757853198,"user_tz":300,"elapsed":798,"user":{"displayName":"Juan José Alzate Molina","userId":"13371847134369819030"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"06f9dcef","executionInfo":{"status":"ok","timestamp":1751757860595,"user_tz":300,"elapsed":283,"user":{"displayName":"Juan José Alzate Molina","userId":"13371847134369819030"}},"outputId":"ca0b254f-fc14-4faf-9621-96245a4ea341"},"source":["mixed_training_df.to_csv(\"mixed_training_data_50P.csv\", index=False)\n","print(\"mixed_training_data.csv exported successfully.\")"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["mixed_training_data.csv exported successfully.\n"]}]}]}